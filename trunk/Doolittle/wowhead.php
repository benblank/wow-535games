<?php // $Id$

// Copyright (c) 2009, Ben Blank
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in the
//  documentation and/or other materials provided with the distribution.
//
// * Neither the name of 535 Design nor the names of its contributors
//  may be used to endorse or promote products derived from this
//  software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED.	IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

$start = microtime(true);
$var = "WowheadMountData";
$svar = "WowheadMountSpeeds";

header("Content-Type: text/plain");
header("Content-Disposition: attachment; filename=$var.lua");

function getValue($xpath, $node) {
	return intval(substr($xpath->query("./small", $node)->item(0)->textContent, 7));
}

$mdoc = new DOMDocument();
@$mdoc->loadHTMLFile("http://www.wowhead.com/?spells=-5");

$mpath = new DOMXPath($mdoc);
$speeds = array('flying' => array(), 'ground' => array(), 'swimming' => array());

echo "-- this file was automatically generated by wowhead.php\n\n$var = {}\n";

ob_start();

foreach($mpath->query("//div[@class='listview-void']/a") as $mnode) {
	$path = $mnode->attributes->getNamedItem("href")->value;

	if (substr($path, 0, 8) === "/?spell=") {
		$id = intval(substr($path, 8));

		echo "\n{$var}[$id] = {} -- {$mnode->textContent}\n";

		switch ($id) {
			case 28828: // Nether Drake
			case 42781: // Upper Deck - Spectral Tiger Mount
			case 64987: // Big Blizzard Bear [PH]
				// either unobtainable or not really a mount
				ob_clean();
				continue;
			break;

			case 30174: // Riding Turtle
				$speeds['ground'][] = 0;
				echo "{$var}[$id]['ground'] = 0\n";
			break;

			case 54729: // Winged Steed of the Ebon Blade
				echo "{$var}[$id]['flying'] = -1\n";
			break;

			case 48025: // Headless Horseman's Mount
				echo "{$var}[$id]['flying'] = -1\n";
			// fall through

			case 58983: // Big Blizzard Bear
				echo "{$var}[$id]['ground'] = -1\n";
			break;

			case 61442: // Swift Mooncloth Carpet
			case 61444: // Swift Shadoweave Carpet
			case 61446: // Swift Spellfire Carpet
				echo "{$var}[$id]['flying'] = 280\n";
			break;

			default:
				$sdoc = new DOMDocument();
				@$sdoc->loadHTMLFile("http://www.wowhead.com/?spell=$id");

				$spath = new DOMXPath($sdoc);
				$ground = false;
				$water = false;

				foreach ($spath->query("//td[starts-with(preceding-sibling::th,'Effect #')]") as $snode) {
					$content = substr($snode->textContent, 0, 36);
					$value = getValue($spath, $snode);

					if ($value > 0 && substr($content, 0, 21) === "Apply Aura: Mod Speed") {
						if (substr($content, 22) === "Mounted Flight") {
							$speeds['flying'][] = $value;
							echo "{$var}[$id]['flying'] = $value\n";

							// flying mounts can only be used in flyable areas and so aren't considered any other kind of mount
							$ground = false;
							$water = false;
							break;
						} else if(substr($content, 22, 4) === "Swim") {
							$speeds['swimming'][] = $value;
							$water = "{$var}[$id]['swimming'] = $value\n";
						} else if(substr($content, 22, 7) === "Mounted") {
							$speeds['ground'][] = $value;
							$ground = "{$var}[$id]['ground'] = $value\n";
						}
					}
				}

				if ($ground) echo $ground;
				if ($water) echo $water;

				unset($spath, $sdoc);
			break;
		}

		flush();
		ob_flush();
	}
}

unset($mpath, $mdoc);

echo "\n$svar = {\n";

foreach ($speeds as $type => $list) {
	echo "\t$type = {\n";

	$list = array_unique($list);
	sort($list);
	$limit = count($list) - 2;
	foreach ($list as $i => $speed) {
		echo "\t\t[$speed] = " . ($i >= $limit ? "true" : "false") . ",\n";
	}

	echo "\t},\n";
}

echo "}\n\n-- Generated in " . (microtime(true) - $start) . " seconds\n";
